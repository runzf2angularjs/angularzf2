<?php
/**
 * Copyright (C) 2015 Orange
 *
 * This software is confidential and proprietary information of Orange.
 * You shall not disclose such Confidential Information and shall use it only
 * in accordance with the terms of the agreement you entered into.
 * Unauthorized copying of this file, via any medium is strictly prohibited.
 *
 * If you are Orange employee you shall use this software in accordance with
 * the Orange Source Charter (http://opensource.itn.ftgroup/index.php/Orange_Source).
 */

namespace Oft\Test\Mvc\Middleware;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-07-10 at 13:14:02.
 */
class DispatchTest extends \PHPUnit_Framework_TestCase
{
    public function getApplication($mainConfig = array())
    {
        return \Oft\Test\Mock\ApplicationMock::factory($mainConfig);
    }

    public function testInitializeControllerInstance()
    {
        $app = $this->getApplication();

        $app->route->setParams(array('test' => 12));
        
        $controller = new \Oft\Test\Mock\TestController();
        
        $dispatch = \Mockery::mock('Oft\Mvc\Middleware\Dispatch') // initializeControllerInstance is protected
            ->makePartial();
        
        $dispatch->initializeControllerInstance($controller, $app);

        $this->assertSame($app, $controller->application);
        $this->assertSame($app->http->request, $controller->httpRequest);
        $this->assertSame($app->http->response, $controller->httpResponse);
        $this->assertNull($controller->viewModel);
        $this->assertSame(array('test' => 12), $controller->params);
    }


    public function testCall()
    {
        $app = $this->getApplication(array(
            'route' => array('error' => array())
        ));
        
        $controllerFactory = \Mockery::mock('Oft\Service\Provider\ControllerFactory');
        $controllerFactory->shouldReceive('createFromRoute')
            ->andReturn(array(
                new \Oft\Test\Mock\TestController(),
                'testAction'
            ));

        $app->setService('ControllerFactory', $controllerFactory);
        
        $dispatch = new \Oft\Mvc\Middleware\Dispatch();
        $dispatch->call($app);
        
        $this->assertInstanceOf('Oft\View\Model', $app->renderOptions->viewModel);
    }

    protected function getAppMockForControllerResult($returnValue)
    {
        $app = $this->getApplication(array(
            'route' => array('error' => array())
        ));
        
        $controllerFactory = \Mockery::mock('Oft\Service\Provider\ControllerFactory');
        $controllerFactory->shouldReceive('createFromRoute')
            ->andReturn(function() use ($returnValue) {
                return $returnValue;
            });
        
        $app->setService('ControllerFactory', $controllerFactory);
        
        return $app;
    }
    
    public function testCallWithViewModelAsResult()
    {
        $data = array(
            'var' => 'value'
        );
        $returnValue = new \Oft\View\Model($data);
        
        $app = $this->getAppMockForControllerResult($returnValue);
        
        $dispatch = new \Oft\Mvc\Middleware\Dispatch();
        $dispatch->call($app);
        
        $this->assertInstanceOf('Oft\View\Model', $app->renderOptions->viewModel);
        $this->assertSame($data, $app->renderOptions->viewModel->getArrayCopy());
    }
    
    public function testCallWithBoolAsResult()
    {
        $app = $this->getAppMockForControllerResult(false);
        
        $dispatch = new \Oft\Mvc\Middleware\Dispatch();
        $dispatch->call($app);
        
        $viewModel = $app->renderOptions->viewModel;
        $this->assertInstanceOf('Oft\View\Model', $viewModel);
        $this->assertFalse($app->renderOptions->renderView);
    }
    
    public function testCallWithArrayAsResult()
    {
        $app = $this->getAppMockForControllerResult(array('var' => 'value'));
        
        $dispatch = new \Oft\Mvc\Middleware\Dispatch();
        $dispatch->call($app);
        
        $viewModel = $app->renderOptions->viewModel;
        $this->assertInstanceOf('Oft\View\Model', $viewModel);
        $this->assertSame('value', $viewModel->var);
    }
}

<?php
/**
 * Copyright (C) 2015 Orange
 *
 * This software is confidential and proprietary information of Orange.
 * You shall not disclose such Confidential Information and shall use it only
 * in accordance with the terms of the agreement you entered into.
 * Unauthorized copying of this file, via any medium is strictly prohibited.
 *
 * If you are Orange employee you shall use this software in accordance with
 * the Orange Source Charter (http://opensource.itn.ftgroup/index.php/Orange_Source).
 */

namespace Oft\Mvc\Context;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-11-25 at 12:43:14.
 */
class IdentityContextTest extends \PHPUnit_Framework_TestCase
{

    /** @var IdentityContext */
    protected $identityContext;

    /** @var Oft\Http\SessionInterface */
    protected $sessionMock;

    protected function setUp()
    {
        $this->sessionMock = \Mockery::mock('Oft\Http\SessionInterface');
        $this->identityContext = new IdentityContext($this->sessionMock, 3600);
    }
    
    /**
     * @covers Oft\Mvc\Context\IdentityContext::get
     */
    public function testGetWithSession()
    {
        $_SERVER['REQUEST_TIME'] = time();

        $time = time() + 10;

        $container = new \ArrayObject();
        $container->identity = new \Oft\Auth\Identity(array());
        $container->expiration = $time;
        $this->sessionMock->shouldReceive('getContainer')
            ->with('Oft\Mvc\Context\IdentityContext')
            ->andReturn($container);

        $identity = $this->identityContext->get();

        $this->assertTrue($container->expiration > $time);

        $this->assertInstanceOf('Oft\Auth\Identity', $identity);
        $this->assertSame($container->identity, $identity);
    }

    /**
     * @covers Oft\Mvc\Context\IdentityContext::get
     */
    public function testGetWithSessionExpired()
    {
        $_SERVER['REQUEST_TIME'] = time();

        $container = new \ArrayObject();
        $container->identity = new \Oft\Auth\Identity(array());
        $container->expiration = time() - 10;
        $this->sessionMock->shouldReceive('getContainer')
            ->with('Oft\Mvc\Context\IdentityContext')
            ->andReturn($container);

        $identity = $this->identityContext->get();
        $this->assertInstanceOf('Oft\Auth\Identity', $identity);
        $this->assertNotSame($container->identity, $identity);

    }

    /**
     * @covers Oft\Mvc\Context\IdentityContext::set
     */
    public function testSet()
    {
        $identity = new \Oft\Auth\Identity(array());

        $container = new \ArrayObject();
        $this->sessionMock->shouldReceive('getContainer')
            ->with('Oft\Mvc\Context\IdentityContext')
            ->andReturn($container);

        $this->identityContext->set($identity);

        $this->assertTrue(isset($container->expiration));

        $this->assertSame($identity, $this->identityContext->get());
    }

    /**
     * @covers Oft\Mvc\Context\IdentityContext::drop
     */
    public function testDrop()
    {
        $this->sessionMock->shouldReceive('dropContainer')
            ->with('Oft\Mvc\Context\IdentityContext');

        $this->identityContext->drop();
    }

}

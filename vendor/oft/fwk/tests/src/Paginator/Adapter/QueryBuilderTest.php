<?php
/**
 * Copyright (C) 2015 Orange
 *
 * This software is confidential and proprietary information of Orange.
 * You shall not disclose such Confidential Information and shall use it only
 * in accordance with the terms of the agreement you entered into.
 * Unauthorized copying of this file, via any medium is strictly prohibited.
 *
 * If you are Orange employee you shall use this software in accordance with
 * the Orange Source Charter (http://opensource.itn.ftgroup/index.php/Orange_Source).
 */

namespace Oft\Test\Paginator\Adapter;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-07-07 at 12:48:07.
 */
class QueryBuilderTest extends \PHPUnit_Framework_TestCase
{
    public function testConstruct()
    {
        $queryBuilder = \Mockery::mock('\Doctrine\DBAL\Query\QueryBuilder');
        $queryBuilder->shouldReceive('getType')
            ->andReturn(\Doctrine\DBAL\Query\QueryBuilder::SELECT);

        new \Oft\Paginator\Adapter\QueryBuilder($queryBuilder);
    }
    
    public function testConstructFailWithInvalidQueryBuilder()
    {
        $this->setExpectedException('\RuntimeException');
        
        $queryBuilder = \Mockery::mock('\Doctrine\DBAL\Query\QueryBuilder');
        $queryBuilder->shouldReceive('getType')
            ->andReturn(\Doctrine\DBAL\Query\QueryBuilder::UPDATE);

        new \Oft\Paginator\Adapter\QueryBuilder($queryBuilder);
    }
    
    public function testGetCount()
    {
        $resultSet = \Mockery::mock('\Doctrine\DBAL\Driver\Statement');
        $resultSet->shouldReceive('fetchColumn')->with(0)->andReturn(45);
        
        $queryBuilder = \Mockery::mock('\Doctrine\DBAL\Query\QueryBuilder');
        $queryBuilder->shouldReceive('getType')
            ->andReturn(\Doctrine\DBAL\Query\QueryBuilder::SELECT);
        $queryBuilder->shouldReceive('execute')
            ->andReturn($resultSet);

        $queryBuilderPaginator = new \Oft\Paginator\Adapter\QueryBuilder($queryBuilder);
        $queryBuilderPaginator->setCountQuery($queryBuilder);
        
        $this->assertSame(45, $queryBuilderPaginator->count());
    }

    public function testGetItems()
    {
        $statement = \Mockery::mock('Doctrine\DBAL\Driver\Statement');
        $statement->shouldReceive('setFetchMode')
                ->andReturn('Oft\Entity\BaseEntity');
        
        $queryBuilder = \Mockery::mock('\Doctrine\DBAL\Query\QueryBuilder');
        $queryBuilder->shouldReceive('getType')
                ->andReturn(\Doctrine\DBAL\Query\QueryBuilder::SELECT);
        $queryBuilder->shouldReceive('setFirstResult')
                ->with(0)
                ->andReturn($queryBuilder);
        $queryBuilder->shouldReceive('setMaxResults')
                ->with(1)
                ->andReturn($queryBuilder);
        
        $queryBuilder->shouldReceive('execute')
                ->andReturn($statement);
        
        $queryBuilderPaginator = new \Oft\Paginator\Adapter\QueryBuilder($queryBuilder);
        
        $results = $queryBuilderPaginator->getItems(0, 1);
        
        $this->assertSame($statement, $results);
    }
    
    public function testGetCountQuery()
    {
        $connection = \Mockery::mock('\Doctrine\DBAL\Connection');
        
        $queryBuilder =  new \Doctrine\DBAL\Query\QueryBuilder($connection);
        $queryBuilder->select()->from('myTable', 'm')->where("name = ?");
        
        $queryBuilderPaginator = new \Oft\Paginator\Adapter\QueryBuilder($queryBuilder);
        
        $countQuery = $queryBuilderPaginator->getCountQuery();
        
        $this->assertInstanceOf('Doctrine\DBAL\Query\QueryBuilder', $countQuery);
        $this->assertSame(array('count(*)'), $countQuery->getQueryPart('select'));
        $this->assertSame(array(array('table' => 'myTable', 'alias' => 'm')), $countQuery->getQueryPart('from'));
        $this->assertSame("name = ?", (string)$countQuery->getQueryPart('where'));        
    }
    
    public function testGetCountQueryResetsQueryParts()
    {
        $connection = \Mockery::mock('\Doctrine\DBAL\Connection');
        
        $queryBuilder =  new \Doctrine\DBAL\Query\QueryBuilder($connection);
        $queryBuilder->select('field1', 'field2')->from('myTable', 'm')->where("name = ?")
                ->orderBy('field1')
                ->groupBy('field2 ASC')
                ->having('someExpr');
        
        $queryBuilderPaginator = new \Oft\Paginator\Adapter\QueryBuilder($queryBuilder);
        
        $countQuery = $queryBuilderPaginator->getCountQuery();
        
        $this->assertInstanceOf('Doctrine\DBAL\Query\QueryBuilder', $countQuery);
        $this->assertSame(array('count(*)'), $countQuery->getQueryPart('select'));
        $this->assertSame(array(array('table' => 'myTable', 'alias' => 'm')), $countQuery->getQueryPart('from'));
        $this->assertSame("name = ?", (string)$countQuery->getQueryPart('where'));
        $this->assertSame(array(), $countQuery->getQueryPart('groupBy'));
        $this->assertSame('', (string)$countQuery->getQueryPart('having'));
        $this->assertSame(array(), $countQuery->getQueryPart('orderBy'));
    }
    
    public function testGetCountQueryExecutedOnce()
    {
        $queryBuilder = \Mockery::mock('\Doctrine\DBAL\Query\QueryBuilder');
        $queryBuilder->shouldReceive('getType')
            ->once()
            ->andReturn(\Doctrine\DBAL\Query\QueryBuilder::SELECT);
        
        $resultSet = \Mockery::mock('\Doctrine\DBAL\Driver\Statement');
        $resultSet->shouldReceive('fetchColumn')
            ->once()
            ->with(0)
            ->andReturn(45);
        
        $countQuery = \Mockery::mock('\Doctrine\DBAL\Query\QueryBuilder');
        $countQuery->shouldReceive('getType')
            ->once()
            ->andReturn(\Doctrine\DBAL\Query\QueryBuilder::SELECT);
        $countQuery->shouldReceive('execute')
            ->once()
            ->andReturn($resultSet);

        $queryBuilderPaginator = new \Oft\Paginator\Adapter\QueryBuilder($queryBuilder);
        $queryBuilderPaginator->setCountQuery($countQuery);
        
        $this->assertSame(45, $queryBuilderPaginator->count());
        $this->assertSame(45, $queryBuilderPaginator->count());
    }
}

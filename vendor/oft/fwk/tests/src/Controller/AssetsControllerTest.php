<?php
/**
 * Copyright (C) 2015 Orange
 *
 * This software is confidential and proprietary information of Orange.
 * You shall not disclose such Confidential Information and shall use it only
 * in accordance with the terms of the agreement you entered into.
 * Unauthorized copying of this file, via any medium is strictly prohibited.
 *
 * If you are Orange employee you shall use this software in accordance with
 * the Orange Source Charter (http://opensource.itn.ftgroup/index.php/Orange_Source).
 */

namespace Oft\Test\Controller;

use DateTime;
use DateTimeZone;
use Mockery;
use Oft\Controller\AssetsController;
use Oft\Mvc\Exception\HttpException;
use Oft\Mvc\Exception\NotFoundException;
use Oft\Test\Mock\ApplicationMock;
use Oft\View\Model;
use PHPUnit_Framework_TestCase;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-12-04 at 12:30:55.
 */
class AssetsControllerTest extends PHPUnit_Framework_TestCase
{

    /**
     * @var AssetsController
     */
    protected $assets;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->assets = new AssetsController;
    }

    public function testRenderActionWhenModified()
    {
        $viewModel = new Model();
        $app = ApplicationMock::factory();

        $realRequest = new Request();
        $realResponse = new Response();

        $app->http->response->shouldReceive('getResponseObject')
            ->andReturn($realResponse);
        $app->http->response->shouldReceive('setContentType')
            ->with('application/javascript');
        $app->http->response->shouldReceive('setContent')
            ->with('dumped');

        $app->http->request->shouldReceive('getRequestObject')
            ->andReturn($realRequest);

        $asset = Mockery::mock('Assetic\Asset\AssetInterface');
        $asset->shouldReceive('getLastModified')
            ->andReturn(time());
        $asset->shouldReceive('dump')
            ->andReturn('dumped');

        $assetManager = Mockery::mock('Oft\Asset\AssetManager');
        $assetManager->shouldReceive('getCollection')
            ->with('myasset', 0) // 0 relatif à "0-hash.js"
            ->andReturn($asset);

        $app->setService('AssetManager', $assetManager);

        $this->assets->setApplication($app);
        $this->assets->setViewModel($viewModel);

        $exceptionTrapped = false;
        try {
            $this->assets->renderAction('vX', 'myasset', 'js', '0-hash.js');
        } catch (HttpException $e) {
            $exceptionTrapped = true;
            $this->assertSame(200, $e->getStatusCode());
            $headers = $e->getHeaders();
            $this->assertInternalType('array', $headers);
            $this->assertArrayHasKey('Content-Type', $headers);
            $this->assertSame($headers['Content-Type'], 'application/javascript');
            $this->assertSame('dumped', $e->getContent());
        }

        $this->assertTrue($exceptionTrapped, 'Une exception aurait due être levée');

        $this->assertFalse($app->renderOptions->renderView);
        $this->assertFalse($app->renderOptions->renderLayout);
    }

    public function testRenderActionWhenNotModified()
    {
        $viewModel = new Model;

        $app = ApplicationMock::factory();

        $lastModified = time() - 3600;

        $ifModifiedDate = new DateTime();
        $ifModifiedDate->setTimestamp($lastModified + 1);
        $ifModifiedDate->setTimezone(new DateTimeZone('UTC'));

        $realRequest = new Request();
        $realRequest->headers->add(array(
            'If-Modified-Since' => $ifModifiedDate->format('D, d M Y H:i:s') . ' GMT'
        ));
        $realResponse = new Response();

        $app->http->response->shouldReceive('getResponseObject')
            ->andReturn($realResponse);
        $app->http->response->shouldReceive('setContentType')
            ->never();
        $app->http->response->shouldReceive('setContent')
            ->never();

        $app->http->request->shouldReceive('getRequestObject')
            ->andReturn($realRequest);

        $asset = Mockery::mock('Assetic\Asset\AssetInterface');
        $asset->shouldReceive('getLastModified')
            ->andReturn($lastModified);
        $asset->shouldReceive('dump')
            ->never();

        $assetManager = Mockery::mock('Oft\Asset\AssetManager');
        $assetManager->shouldReceive('getCollection')
            ->with('myasset', 0) // 0 relatif à "0-hash.js"
            ->once()
            ->andReturn($asset);

        $app->setService('AssetManager', $assetManager);

        $this->assets->setApplication($app);
        $this->assets->setViewModel($viewModel);

        $this->assets->renderAction('vX', 'myasset', 'js', '0-hash.js');

        $this->assertFalse($app->renderOptions->renderView);
        $this->assertFalse($app->renderOptions->renderLayout);
    }

    public function testRenderFileAction()
    {
        $viewModel = new Model();

        // Le fichier doit exister pour realpath()
        $ressource = 'image.jpg';

        $app = $this->getAppForRenderFileAction();

        $this->assets->setApplication($app);
        $this->assets->setViewModel($viewModel);

        $exceptionTrapped = false;
        try {
            $this->assets->renderFileAction('vX', 'myasset', 'image', $ressource);
        } catch (HttpException $e) {
            $exceptionTrapped = true;
            $this->assertSame(200, $e->getStatusCode());
            $this->assertSame('IMAGE_CONTENT', $e->getContent());
            
            $headers = $e->getHeaders();
            $this->assertInternalType('array', $headers);
            $this->assertArrayHasKey('Content-Type', $headers);
            $this->assertSame($headers['Content-Type'], 'image/jpeg');
        }

        $this->assertTrue($exceptionTrapped, 'Une exception aurait due être levée');

        $this->assertFalse($app->renderOptions->renderView);
        $this->assertFalse($app->renderOptions->renderLayout);
    }

    public function testRenderFileActionOutFromDocumentRoot()
    {
        $viewModel = new Model();

        // Le fichier doit exister pour realpath()
        $ressource = '../../../../' . basename(__FILE__);

        $app = $this->getAppForRenderFileAction();

        $this->assets->setApplication($app);
        $this->assets->setViewModel($viewModel);

        $exceptionTrapped = false;
        try {
            $this->assets->renderFileAction('vX', 'myasset', 'image', $ressource);
        } catch (HttpException $e) {
            $exceptionTrapped = true;
            $this->assertSame(404, $e->getStatusCode());
        }

        $this->assertTrue($exceptionTrapped, 'Une exception aurait due être levée');
    }

    protected function getAppForRenderFileAction()
    {
        $sfResponse = new Response();
        $sfRequest = new Request();

        $app = ApplicationMock::factory();

        $app->http->request->shouldReceive('getRequestObject')
            ->andReturn($sfRequest);
        $app->http->response->shouldReceive('getResponseObject')
            ->andReturn($sfResponse);

        $app->http->request->shouldReceive('getFromServer')
            ->with('DOCUMENT_ROOT')
            ->andReturn(__DIR__ . '/_files');

        $assetManager = Mockery::mock('Oft\Asset\AssetManager');
        $assetManager->shouldReceive('getCollectionModule')
            ->andReturn('mymod');

        $module = Mockery::mock('Oft\Module\ModuleInterface');
        $module->shouldReceive('getName')
            ->andReturn('mymod');
        $module->shouldReceive('getDir')
            ->with('assets')
            ->andReturn(__DIR__ . '/_files/assets');

        $app->moduleManager->addModule($module);

        $app->setService('AssetManager', $assetManager);

        return $app;
    }

}
